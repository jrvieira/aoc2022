module Îš10 where

import Zero.Zero

import Data.List ( sort )

test :: IO ()
test = do
   input <- parse <$> readFile "./tests/10.txt"
   teqt "part 1" 13140 $ part1 input
-- teqt "part 2" undefined $ part2 input
   pure ()

main :: IO ()
main = do
   input <- parse <$> readFile "./input/10.txt"
   print $ part1 input
-- print $ part2 input
   pure ()

parse :: String -> [Op]
parse = map instruction . lines

data Op = Noop | Add Int

instruction :: String -> Op
instruction s
   | ["addx",x] <- words s = Add (read x)
   | "noop" <- s = Noop
   | otherwise = error $ unwords ["illegal instruction:",s]

-- part 1

part1 :: [Op] -> Int
part1 = strength [20,60,100,140,180,220] . signal

signal :: [Op] -> [Int]
signal = (1 :) .  go 1
   where
   go :: Int -> [Op] -> [Int]
   go _ [] = []
   go x (o:os)
      | Noop <- o = x : go x os
      | Add n <- o = replicate 2 x <> [n + 2] <> go x os

strength :: [Int] -> [Int] -> Int
strength is s = sum $ go 0 (sort is) s
   where
   go :: Int -> [Int] -> [Int] -> [Int]
   go _ [] _ = []
   go i (n:ns) (x:xs)
      | n == i = (i * x) : go (succ i) ns xs
      | otherwise = go (succ i) (n:ns) xs
   go _ _ _ = error "signal lost"

-- part 2

part2 :: a
part2 = undefined
